// code generated by pbf v4.0.1

export const ProtoOAPayloadType = {
    "PROTO_OA_APPLICATION_AUTH_REQ": 2100,
    "PROTO_OA_APPLICATION_AUTH_RES": 2101,
    "PROTO_OA_ACCOUNT_AUTH_REQ": 2102,
    "PROTO_OA_ACCOUNT_AUTH_RES": 2103,
    "PROTO_OA_VERSION_REQ": 2104,
    "PROTO_OA_VERSION_RES": 2105,
    "PROTO_OA_NEW_ORDER_REQ": 2106,
    "PROTO_OA_TRAILING_SL_CHANGED_EVENT": 2107,
    "PROTO_OA_CANCEL_ORDER_REQ": 2108,
    "PROTO_OA_AMEND_ORDER_REQ": 2109,
    "PROTO_OA_AMEND_POSITION_SLTP_REQ": 2110,
    "PROTO_OA_CLOSE_POSITION_REQ": 2111,
    "PROTO_OA_ASSET_LIST_REQ": 2112,
    "PROTO_OA_ASSET_LIST_RES": 2113,
    "PROTO_OA_SYMBOLS_LIST_REQ": 2114,
    "PROTO_OA_SYMBOLS_LIST_RES": 2115,
    "PROTO_OA_SYMBOL_BY_ID_REQ": 2116,
    "PROTO_OA_SYMBOL_BY_ID_RES": 2117,
    "PROTO_OA_SYMBOLS_FOR_CONVERSION_REQ": 2118,
    "PROTO_OA_SYMBOLS_FOR_CONVERSION_RES": 2119,
    "PROTO_OA_SYMBOL_CHANGED_EVENT": 2120,
    "PROTO_OA_TRADER_REQ": 2121,
    "PROTO_OA_TRADER_RES": 2122,
    "PROTO_OA_TRADER_UPDATE_EVENT": 2123,
    "PROTO_OA_RECONCILE_REQ": 2124,
    "PROTO_OA_RECONCILE_RES": 2125,
    "PROTO_OA_EXECUTION_EVENT": 2126,
    "PROTO_OA_SUBSCRIBE_SPOTS_REQ": 2127,
    "PROTO_OA_SUBSCRIBE_SPOTS_RES": 2128,
    "PROTO_OA_UNSUBSCRIBE_SPOTS_REQ": 2129,
    "PROTO_OA_UNSUBSCRIBE_SPOTS_RES": 2130,
    "PROTO_OA_SPOT_EVENT": 2131,
    "PROTO_OA_ORDER_ERROR_EVENT": 2132,
    "PROTO_OA_DEAL_LIST_REQ": 2133,
    "PROTO_OA_DEAL_LIST_RES": 2134,
    "PROTO_OA_SUBSCRIBE_LIVE_TRENDBAR_REQ": 2135,
    "PROTO_OA_UNSUBSCRIBE_LIVE_TRENDBAR_REQ": 2136,
    "PROTO_OA_GET_TRENDBARS_REQ": 2137,
    "PROTO_OA_GET_TRENDBARS_RES": 2138,
    "PROTO_OA_EXPECTED_MARGIN_REQ": 2139,
    "PROTO_OA_EXPECTED_MARGIN_RES": 2140,
    "PROTO_OA_MARGIN_CHANGED_EVENT": 2141,
    "PROTO_OA_ERROR_RES": 2142,
    "PROTO_OA_CASH_FLOW_HISTORY_LIST_REQ": 2143,
    "PROTO_OA_CASH_FLOW_HISTORY_LIST_RES": 2144,
    "PROTO_OA_GET_TICKDATA_REQ": 2145,
    "PROTO_OA_GET_TICKDATA_RES": 2146,
    "PROTO_OA_ACCOUNTS_TOKEN_INVALIDATED_EVENT": 2147,
    "PROTO_OA_CLIENT_DISCONNECT_EVENT": 2148,
    "PROTO_OA_GET_ACCOUNTS_BY_ACCESS_TOKEN_REQ": 2149,
    "PROTO_OA_GET_ACCOUNTS_BY_ACCESS_TOKEN_RES": 2150,
    "PROTO_OA_GET_CTID_PROFILE_BY_TOKEN_REQ": 2151,
    "PROTO_OA_GET_CTID_PROFILE_BY_TOKEN_RES": 2152,
    "PROTO_OA_ASSET_CLASS_LIST_REQ": 2153,
    "PROTO_OA_ASSET_CLASS_LIST_RES": 2154,
    "PROTO_OA_DEPTH_EVENT": 2155,
    "PROTO_OA_SUBSCRIBE_DEPTH_QUOTES_REQ": 2156,
    "PROTO_OA_SUBSCRIBE_DEPTH_QUOTES_RES": 2157,
    "PROTO_OA_UNSUBSCRIBE_DEPTH_QUOTES_REQ": 2158,
    "PROTO_OA_UNSUBSCRIBE_DEPTH_QUOTES_RES": 2159,
    "PROTO_OA_SYMBOL_CATEGORY_REQ": 2160,
    "PROTO_OA_SYMBOL_CATEGORY_RES": 2161,
    "PROTO_OA_ACCOUNT_LOGOUT_REQ": 2162,
    "PROTO_OA_ACCOUNT_LOGOUT_RES": 2163,
    "PROTO_OA_ACCOUNT_DISCONNECT_EVENT": 2164,
    "PROTO_OA_SUBSCRIBE_LIVE_TRENDBAR_RES": 2165,
    "PROTO_OA_UNSUBSCRIBE_LIVE_TRENDBAR_RES": 2166,
    "PROTO_OA_MARGIN_CALL_LIST_REQ": 2167,
    "PROTO_OA_MARGIN_CALL_LIST_RES": 2168,
    "PROTO_OA_MARGIN_CALL_UPDATE_REQ": 2169,
    "PROTO_OA_MARGIN_CALL_UPDATE_RES": 2170,
    "PROTO_OA_MARGIN_CALL_UPDATE_EVENT": 2171,
    "PROTO_OA_MARGIN_CALL_TRIGGER_EVENT": 2172,
    "PROTO_OA_REFRESH_TOKEN_REQ": 2173,
    "PROTO_OA_REFRESH_TOKEN_RES": 2174,
    "PROTO_OA_ORDER_LIST_REQ": 2175,
    "PROTO_OA_ORDER_LIST_RES": 2176,
    "PROTO_OA_GET_DYNAMIC_LEVERAGE_REQ": 2177,
    "PROTO_OA_GET_DYNAMIC_LEVERAGE_RES": 2178,
    "PROTO_OA_DEAL_LIST_BY_POSITION_ID_REQ": 2179,
    "PROTO_OA_DEAL_LIST_BY_POSITION_ID_RES": 2180,
    "PROTO_OA_ORDER_DETAILS_REQ": 2181,
    "PROTO_OA_ORDER_DETAILS_RES": 2182,
    "PROTO_OA_ORDER_LIST_BY_POSITION_ID_REQ": 2183,
    "PROTO_OA_ORDER_LIST_BY_POSITION_ID_RES": 2184,
    "PROTO_OA_DEAL_OFFSET_LIST_REQ": 2185,
    "PROTO_OA_DEAL_OFFSET_LIST_RES": 2186,
    "PROTO_OA_GET_POSITION_UNREALIZED_PNL_REQ": 2187,
    "PROTO_OA_GET_POSITION_UNREALIZED_PNL_RES": 2188,
    "PROTO_OA_V1_PNL_CHANGE_EVENT": 2189,
    "PROTO_OA_V1_PNL_CHANGE_SUBSCRIBE_REQ": 2190,
    "PROTO_OA_V1_PNL_CHANGE_SUBSCRIBE_RES": 2191,
    "PROTO_OA_V1_PNL_CHANGE_UN_SUBSCRIBE_REQ": 2192,
    "PROTO_OA_V1_PNL_CHANGE_UN_SUBSCRIBE_RES": 2193
};

export const ProtoOADayOfWeek = {
    "NONE": 0,
    "MONDAY": 1,
    "TUESDAY": 2,
    "WEDNESDAY": 3,
    "THURSDAY": 4,
    "FRIDAY": 5,
    "SATURDAY": 6,
    "SUNDAY": 7
};

export const ProtoOACommissionType = {
    "USD_PER_MILLION_USD": 1,
    "USD_PER_LOT": 2,
    "PERCENTAGE_OF_VALUE": 3,
    "QUOTE_CCY_PER_LOT": 4
};

export const ProtoOASymbolDistanceType = {
    "SYMBOL_DISTANCE_IN_POINTS": 1,
    "SYMBOL_DISTANCE_IN_PERCENTAGE": 2
};

export const ProtoOAMinCommissionType = {
    "CURRENCY": 1,
    "QUOTE_CURRENCY": 2
};

export const ProtoOATradingMode = {
    "ENABLED": 0,
    "DISABLED_WITHOUT_PENDINGS_EXECUTION": 1,
    "DISABLED_WITH_PENDINGS_EXECUTION": 2,
    "CLOSE_ONLY_MODE": 3
};

export const ProtoOASwapCalculationType = {
    "PIPS": 0,
    "PERCENTAGE": 1,
    "POINTS": 2
};

export const ProtoOAAccessRights = {
    "FULL_ACCESS": 0,
    "CLOSE_ONLY": 1,
    "NO_TRADING": 2,
    "NO_LOGIN": 3
};

export const ProtoOATotalMarginCalculationType = {
    "MAX": 0,
    "SUM": 1,
    "NET": 2
};

export const ProtoOAAccountType = {
    "HEDGED": 0,
    "NETTED": 1,
    "SPREAD_BETTING": 2
};

export const ProtoOAPositionStatus = {
    "POSITION_STATUS_OPEN": 1,
    "POSITION_STATUS_CLOSED": 2,
    "POSITION_STATUS_CREATED": 3,
    "POSITION_STATUS_ERROR": 4
};

export const ProtoOATradeSide = {
    "BUY": 1,
    "SELL": 2
};

export const ProtoOAOrderType = {
    "MARKET": 1,
    "LIMIT": 2,
    "STOP": 3,
    "STOP_LOSS_TAKE_PROFIT": 4,
    "MARKET_RANGE": 5,
    "STOP_LIMIT": 6
};

export const ProtoOATimeInForce = {
    "GOOD_TILL_DATE": 1,
    "GOOD_TILL_CANCEL": 2,
    "IMMEDIATE_OR_CANCEL": 3,
    "FILL_OR_KILL": 4,
    "MARKET_ON_OPEN": 5
};

export const ProtoOAOrderStatus = {
    "ORDER_STATUS_ACCEPTED": 1,
    "ORDER_STATUS_FILLED": 2,
    "ORDER_STATUS_REJECTED": 3,
    "ORDER_STATUS_EXPIRED": 4,
    "ORDER_STATUS_CANCELLED": 5
};

export const ProtoOAOrderTriggerMethod = {
    "TRADE": 1,
    "OPPOSITE": 2,
    "DOUBLE_TRADE": 3,
    "DOUBLE_OPPOSITE": 4
};

export const ProtoOAExecutionType = {
    "ORDER_ACCEPTED": 2,
    "ORDER_FILLED": 3,
    "ORDER_REPLACED": 4,
    "ORDER_CANCELLED": 5,
    "ORDER_EXPIRED": 6,
    "ORDER_REJECTED": 7,
    "ORDER_CANCEL_REJECTED": 8,
    "SWAP": 9,
    "DEPOSIT_WITHDRAW": 10,
    "ORDER_PARTIAL_FILL": 11,
    "BONUS_DEPOSIT_WITHDRAW": 12
};

export const ProtoOAChangeBonusType = {
    "BONUS_DEPOSIT": 0,
    "BONUS_WITHDRAW": 1
};

export const ProtoOAChangeBalanceType = {
    "BALANCE_DEPOSIT": 0,
    "BALANCE_WITHDRAW": 1,
    "BALANCE_DEPOSIT_STRATEGY_COMMISSION_INNER": 3,
    "BALANCE_WITHDRAW_STRATEGY_COMMISSION_INNER": 4,
    "BALANCE_DEPOSIT_IB_COMMISSIONS": 5,
    "BALANCE_WITHDRAW_IB_SHARED_PERCENTAGE": 6,
    "BALANCE_DEPOSIT_IB_SHARED_PERCENTAGE_FROM_SUB_IB": 7,
    "BALANCE_DEPOSIT_IB_SHARED_PERCENTAGE_FROM_BROKER": 8,
    "BALANCE_DEPOSIT_REBATE": 9,
    "BALANCE_WITHDRAW_REBATE": 10,
    "BALANCE_DEPOSIT_STRATEGY_COMMISSION_OUTER": 11,
    "BALANCE_WITHDRAW_STRATEGY_COMMISSION_OUTER": 12,
    "BALANCE_WITHDRAW_BONUS_COMPENSATION": 13,
    "BALANCE_WITHDRAW_IB_SHARED_PERCENTAGE_TO_BROKER": 14,
    "BALANCE_DEPOSIT_DIVIDENDS": 15,
    "BALANCE_WITHDRAW_DIVIDENDS": 16,
    "BALANCE_WITHDRAW_GSL_CHARGE": 17,
    "BALANCE_WITHDRAW_ROLLOVER": 18,
    "BALANCE_DEPOSIT_NONWITHDRAWABLE_BONUS": 19,
    "BALANCE_WITHDRAW_NONWITHDRAWABLE_BONUS": 20,
    "BALANCE_DEPOSIT_SWAP": 21,
    "BALANCE_WITHDRAW_SWAP": 22,
    "BALANCE_DEPOSIT_MANAGEMENT_FEE": 27,
    "BALANCE_WITHDRAW_MANAGEMENT_FEE": 28,
    "BALANCE_DEPOSIT_PERFORMANCE_FEE": 29,
    "BALANCE_WITHDRAW_FOR_SUBACCOUNT": 30,
    "BALANCE_DEPOSIT_TO_SUBACCOUNT": 31,
    "BALANCE_WITHDRAW_FROM_SUBACCOUNT": 32,
    "BALANCE_DEPOSIT_FROM_SUBACCOUNT": 33,
    "BALANCE_WITHDRAW_COPY_FEE": 34,
    "BALANCE_WITHDRAW_INACTIVITY_FEE": 35,
    "BALANCE_DEPOSIT_TRANSFER": 36,
    "BALANCE_WITHDRAW_TRANSFER": 37,
    "BALANCE_DEPOSIT_CONVERTED_BONUS": 38,
    "BALANCE_DEPOSIT_NEGATIVE_BALANCE_PROTECTION": 39
};

export const ProtoOADealStatus = {
    "FILLED": 2,
    "PARTIALLY_FILLED": 3,
    "REJECTED": 4,
    "INTERNALLY_REJECTED": 5,
    "ERROR": 6,
    "MISSED": 7
};

export const ProtoOATrendbarPeriod = {
    "M1": 1,
    "M2": 2,
    "M3": 3,
    "M4": 4,
    "M5": 5,
    "M10": 6,
    "M15": 7,
    "M30": 8,
    "H1": 9,
    "H4": 10,
    "H12": 11,
    "D1": 12,
    "W1": 13,
    "MN1": 14
};

export const ProtoOAQuoteType = {
    "BID": 1,
    "ASK": 2
};

export const ProtoOAClientPermissionScope = {
    "SCOPE_VIEW": 0,
    "SCOPE_TRADE": 1
};

export const ProtoOANotificationType = {
    "MARGIN_LEVEL_THRESHOLD_1": 61,
    "MARGIN_LEVEL_THRESHOLD_2": 62,
    "MARGIN_LEVEL_THRESHOLD_3": 63
};

export const ProtoOAErrorCode = {
    "OA_AUTH_TOKEN_EXPIRED": 1,
    "ACCOUNT_NOT_AUTHORIZED": 2,
    "RET_NO_SUCH_LOGIN": 12,
    "ALREADY_LOGGED_IN": 14,
    "RET_ACCOUNT_DISABLED": 64,
    "CH_CLIENT_AUTH_FAILURE": 101,
    "CH_CLIENT_NOT_AUTHENTICATED": 102,
    "CH_CLIENT_ALREADY_AUTHENTICATED": 103,
    "CH_ACCESS_TOKEN_INVALID": 104,
    "CH_SERVER_NOT_REACHABLE": 105,
    "CH_CTID_TRADER_ACCOUNT_NOT_FOUND": 106,
    "CH_OA_CLIENT_NOT_FOUND": 107,
    "REQUEST_FREQUENCY_EXCEEDED": 108,
    "SERVER_IS_UNDER_MAINTENANCE": 109,
    "CHANNEL_IS_BLOCKED": 110,
    "CONNECTIONS_LIMIT_EXCEEDED": 67,
    "WORSE_GSL_NOT_ALLOWED": 68,
    "SYMBOL_HAS_HOLIDAY": 69,
    "NOT_SUBSCRIBED_TO_SPOTS": 112,
    "ALREADY_SUBSCRIBED": 113,
    "SYMBOL_NOT_FOUND": 114,
    "UNKNOWN_SYMBOL": 115,
    "INCORRECT_BOUNDARIES": 35,
    "NO_QUOTES": 117,
    "NOT_ENOUGH_MONEY": 118,
    "MAX_EXPOSURE_REACHED": 119,
    "POSITION_NOT_FOUND": 120,
    "ORDER_NOT_FOUND": 121,
    "POSITION_NOT_OPEN": 122,
    "POSITION_LOCKED": 123,
    "TOO_MANY_POSITIONS": 124,
    "TRADING_BAD_VOLUME": 125,
    "TRADING_BAD_STOPS": 126,
    "TRADING_BAD_PRICES": 127,
    "TRADING_BAD_STAKE": 128,
    "PROTECTION_IS_TOO_CLOSE_TO_MARKET": 129,
    "TRADING_BAD_EXPIRATION_DATE": 130,
    "PENDING_EXECUTION": 131,
    "TRADING_DISABLED": 132,
    "TRADING_NOT_ALLOWED": 133,
    "UNABLE_TO_CANCEL_ORDER": 134,
    "UNABLE_TO_AMEND_ORDER": 135,
    "SHORT_SELLING_NOT_ALLOWED": 136,
    "NOT_SUBSCRIBED_TO_PNL": 137
};

export const ProtoOALimitedRiskMarginCalculationStrategy = {
    "ACCORDING_TO_LEVERAGE": 0,
    "ACCORDING_TO_GSL": 1,
    "ACCORDING_TO_GSL_AND_LEVERAGE": 2
};

export const ProtoOAStopOutStrategy = {
    "MOST_MARGIN_USED_FIRST": 0,
    "MOST_LOSING_FIRST": 1
};

export function readProtoOAAsset(pbf, end) {
    return pbf.readFields(readProtoOAAssetField, {assetId: 0, name: "", displayName: "", digits: 0}, end);
}
function readProtoOAAssetField(tag, obj, pbf) {
    if (tag === 1) obj.assetId = pbf.readVarint(true);
    else if (tag === 2) obj.name = pbf.readString();
    else if (tag === 3) obj.displayName = pbf.readString();
    else if (tag === 4) obj.digits = pbf.readVarint(true);
}
export function writeProtoOAAsset(obj, pbf) {
    if (obj.assetId) pbf.writeVarintField(1, obj.assetId);
    if (obj.name) pbf.writeStringField(2, obj.name);
    if (obj.displayName) pbf.writeStringField(3, obj.displayName);
    if (obj.digits) pbf.writeVarintField(4, obj.digits);
}

export function readProtoOASymbol(pbf, end) {
    return pbf.readFields(readProtoOASymbolField, {symbolId: 0, digits: 0, pipPosition: 0, enableShortSelling: false, guaranteedStopLoss: false, swapRollover3Days: 1, swapLong: 0, swapShort: 0, maxVolume: 0, minVolume: 0, stepVolume: 0, maxExposure: 0, schedule: [], commission: 0, commissionType: 1, slDistance: 0, tpDistance: 0, gslDistance: 0, gslCharge: 0, distanceSetIn: 1, minCommission: 0, minCommissionType: 1, minCommissionAsset: "\"USD\"", rolloverCommission: 0, skipRolloverDays: 0, scheduleTimeZone: "", tradingMode: 0, rolloverCommission3Days: 1, swapCalculationType: 0, lotSize: 0, preciseTradingCommissionRate: 0, preciseMinCommission: 0, holiday: [], pnlConversionFeeRate: 0, leverageId: 0, swapPeriod: 0, swapTime: 0, skipSWAPPeriods: 0, chargeSwapAtWeekends: false, measurementUnits: ""}, end);
}
function readProtoOASymbolField(tag, obj, pbf) {
    if (tag === 1) obj.symbolId = pbf.readVarint(true);
    else if (tag === 2) obj.digits = pbf.readVarint(true);
    else if (tag === 3) obj.pipPosition = pbf.readVarint(true);
    else if (tag === 4) obj.enableShortSelling = pbf.readBoolean();
    else if (tag === 5) obj.guaranteedStopLoss = pbf.readBoolean();
    else if (tag === 6) obj.swapRollover3Days = pbf.readVarint();
    else if (tag === 7) obj.swapLong = pbf.readDouble();
    else if (tag === 8) obj.swapShort = pbf.readDouble();
    else if (tag === 9) obj.maxVolume = pbf.readVarint(true);
    else if (tag === 10) obj.minVolume = pbf.readVarint(true);
    else if (tag === 11) obj.stepVolume = pbf.readVarint(true);
    else if (tag === 12) obj.maxExposure = pbf.readVarint();
    else if (tag === 13) obj.schedule.push(readProtoOAInterval(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 14) obj.commission = pbf.readVarint(true);
    else if (tag === 15) obj.commissionType = pbf.readVarint();
    else if (tag === 16) obj.slDistance = pbf.readVarint();
    else if (tag === 17) obj.tpDistance = pbf.readVarint();
    else if (tag === 18) obj.gslDistance = pbf.readVarint();
    else if (tag === 19) obj.gslCharge = pbf.readVarint(true);
    else if (tag === 20) obj.distanceSetIn = pbf.readVarint();
    else if (tag === 21) obj.minCommission = pbf.readVarint(true);
    else if (tag === 22) obj.minCommissionType = pbf.readVarint();
    else if (tag === 23) obj.minCommissionAsset = pbf.readString();
    else if (tag === 24) obj.rolloverCommission = pbf.readVarint(true);
    else if (tag === 25) obj.skipRolloverDays = pbf.readVarint(true);
    else if (tag === 26) obj.scheduleTimeZone = pbf.readString();
    else if (tag === 27) obj.tradingMode = pbf.readVarint();
    else if (tag === 28) obj.rolloverCommission3Days = pbf.readVarint();
    else if (tag === 29) obj.swapCalculationType = pbf.readVarint();
    else if (tag === 30) obj.lotSize = pbf.readVarint(true);
    else if (tag === 31) obj.preciseTradingCommissionRate = pbf.readVarint(true);
    else if (tag === 32) obj.preciseMinCommission = pbf.readVarint(true);
    else if (tag === 33) obj.holiday.push(readProtoOAHoliday(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 34) obj.pnlConversionFeeRate = pbf.readVarint(true);
    else if (tag === 35) obj.leverageId = pbf.readVarint(true);
    else if (tag === 36) obj.swapPeriod = pbf.readVarint(true);
    else if (tag === 37) obj.swapTime = pbf.readVarint(true);
    else if (tag === 38) obj.skipSWAPPeriods = pbf.readVarint(true);
    else if (tag === 39) obj.chargeSwapAtWeekends = pbf.readBoolean();
    else if (tag === 40) obj.measurementUnits = pbf.readString();
}
export function writeProtoOASymbol(obj, pbf) {
    if (obj.symbolId) pbf.writeVarintField(1, obj.symbolId);
    if (obj.digits) pbf.writeVarintField(2, obj.digits);
    if (obj.pipPosition) pbf.writeVarintField(3, obj.pipPosition);
    if (obj.enableShortSelling) pbf.writeBooleanField(4, obj.enableShortSelling);
    if (obj.guaranteedStopLoss) pbf.writeBooleanField(5, obj.guaranteedStopLoss);
    if (obj.swapRollover3Days != null && obj.swapRollover3Days !== 1) pbf.writeVarintField(6, obj.swapRollover3Days);
    if (obj.swapLong) pbf.writeDoubleField(7, obj.swapLong);
    if (obj.swapShort) pbf.writeDoubleField(8, obj.swapShort);
    if (obj.maxVolume) pbf.writeVarintField(9, obj.maxVolume);
    if (obj.minVolume) pbf.writeVarintField(10, obj.minVolume);
    if (obj.stepVolume) pbf.writeVarintField(11, obj.stepVolume);
    if (obj.maxExposure) pbf.writeVarintField(12, obj.maxExposure);
    if (obj.schedule) for (const item of obj.schedule) pbf.writeMessage(13, writeProtoOAInterval, item);
    if (obj.commission) pbf.writeVarintField(14, obj.commission);
    if (obj.commissionType != null && obj.commissionType !== 1) pbf.writeVarintField(15, obj.commissionType);
    if (obj.slDistance) pbf.writeVarintField(16, obj.slDistance);
    if (obj.tpDistance) pbf.writeVarintField(17, obj.tpDistance);
    if (obj.gslDistance) pbf.writeVarintField(18, obj.gslDistance);
    if (obj.gslCharge) pbf.writeVarintField(19, obj.gslCharge);
    if (obj.distanceSetIn != null && obj.distanceSetIn !== 1) pbf.writeVarintField(20, obj.distanceSetIn);
    if (obj.minCommission) pbf.writeVarintField(21, obj.minCommission);
    if (obj.minCommissionType != null && obj.minCommissionType !== 1) pbf.writeVarintField(22, obj.minCommissionType);
    if (obj.minCommissionAsset != null && obj.minCommissionAsset !== "\"USD\"") pbf.writeStringField(23, obj.minCommissionAsset);
    if (obj.rolloverCommission) pbf.writeVarintField(24, obj.rolloverCommission);
    if (obj.skipRolloverDays) pbf.writeVarintField(25, obj.skipRolloverDays);
    if (obj.scheduleTimeZone) pbf.writeStringField(26, obj.scheduleTimeZone);
    if (obj.tradingMode) pbf.writeVarintField(27, obj.tradingMode);
    if (obj.rolloverCommission3Days != null && obj.rolloverCommission3Days !== 1) pbf.writeVarintField(28, obj.rolloverCommission3Days);
    if (obj.swapCalculationType) pbf.writeVarintField(29, obj.swapCalculationType);
    if (obj.lotSize) pbf.writeVarintField(30, obj.lotSize);
    if (obj.preciseTradingCommissionRate) pbf.writeVarintField(31, obj.preciseTradingCommissionRate);
    if (obj.preciseMinCommission) pbf.writeVarintField(32, obj.preciseMinCommission);
    if (obj.holiday) for (const item of obj.holiday) pbf.writeMessage(33, writeProtoOAHoliday, item);
    if (obj.pnlConversionFeeRate) pbf.writeVarintField(34, obj.pnlConversionFeeRate);
    if (obj.leverageId) pbf.writeVarintField(35, obj.leverageId);
    if (obj.swapPeriod) pbf.writeVarintField(36, obj.swapPeriod);
    if (obj.swapTime) pbf.writeVarintField(37, obj.swapTime);
    if (obj.skipSWAPPeriods) pbf.writeVarintField(38, obj.skipSWAPPeriods);
    if (obj.chargeSwapAtWeekends) pbf.writeBooleanField(39, obj.chargeSwapAtWeekends);
    if (obj.measurementUnits) pbf.writeStringField(40, obj.measurementUnits);
}

export function readProtoOALightSymbol(pbf, end) {
    return pbf.readFields(readProtoOALightSymbolField, {symbolId: 0, symbolName: "", enabled: false, baseAssetId: 0, quoteAssetId: 0, symbolCategoryId: 0, description: "", sortingNumber: 0}, end);
}
function readProtoOALightSymbolField(tag, obj, pbf) {
    if (tag === 1) obj.symbolId = pbf.readVarint(true);
    else if (tag === 2) obj.symbolName = pbf.readString();
    else if (tag === 3) obj.enabled = pbf.readBoolean();
    else if (tag === 4) obj.baseAssetId = pbf.readVarint(true);
    else if (tag === 5) obj.quoteAssetId = pbf.readVarint(true);
    else if (tag === 6) obj.symbolCategoryId = pbf.readVarint(true);
    else if (tag === 7) obj.description = pbf.readString();
    else if (tag === 8) obj.sortingNumber = pbf.readDouble();
}
export function writeProtoOALightSymbol(obj, pbf) {
    if (obj.symbolId) pbf.writeVarintField(1, obj.symbolId);
    if (obj.symbolName) pbf.writeStringField(2, obj.symbolName);
    if (obj.enabled) pbf.writeBooleanField(3, obj.enabled);
    if (obj.baseAssetId) pbf.writeVarintField(4, obj.baseAssetId);
    if (obj.quoteAssetId) pbf.writeVarintField(5, obj.quoteAssetId);
    if (obj.symbolCategoryId) pbf.writeVarintField(6, obj.symbolCategoryId);
    if (obj.description) pbf.writeStringField(7, obj.description);
    if (obj.sortingNumber) pbf.writeDoubleField(8, obj.sortingNumber);
}

export function readProtoOAArchivedSymbol(pbf, end) {
    return pbf.readFields(readProtoOAArchivedSymbolField, {symbolId: 0, name: "", utcLastUpdateTimestamp: 0, description: ""}, end);
}
function readProtoOAArchivedSymbolField(tag, obj, pbf) {
    if (tag === 1) obj.symbolId = pbf.readVarint(true);
    else if (tag === 2) obj.name = pbf.readString();
    else if (tag === 3) obj.utcLastUpdateTimestamp = pbf.readVarint(true);
    else if (tag === 4) obj.description = pbf.readString();
}
export function writeProtoOAArchivedSymbol(obj, pbf) {
    if (obj.symbolId) pbf.writeVarintField(1, obj.symbolId);
    if (obj.name) pbf.writeStringField(2, obj.name);
    if (obj.utcLastUpdateTimestamp) pbf.writeVarintField(3, obj.utcLastUpdateTimestamp);
    if (obj.description) pbf.writeStringField(4, obj.description);
}

export function readProtoOASymbolCategory(pbf, end) {
    return pbf.readFields(readProtoOASymbolCategoryField, {id: 0, assetClassId: 0, name: "", sortingNumber: 0}, end);
}
function readProtoOASymbolCategoryField(tag, obj, pbf) {
    if (tag === 1) obj.id = pbf.readVarint(true);
    else if (tag === 2) obj.assetClassId = pbf.readVarint(true);
    else if (tag === 3) obj.name = pbf.readString();
    else if (tag === 4) obj.sortingNumber = pbf.readDouble();
}
export function writeProtoOASymbolCategory(obj, pbf) {
    if (obj.id) pbf.writeVarintField(1, obj.id);
    if (obj.assetClassId) pbf.writeVarintField(2, obj.assetClassId);
    if (obj.name) pbf.writeStringField(3, obj.name);
    if (obj.sortingNumber) pbf.writeDoubleField(4, obj.sortingNumber);
}

export function readProtoOAInterval(pbf, end) {
    return pbf.readFields(readProtoOAIntervalField, {startSecond: 0, endSecond: 0}, end);
}
function readProtoOAIntervalField(tag, obj, pbf) {
    if (tag === 3) obj.startSecond = pbf.readVarint();
    else if (tag === 4) obj.endSecond = pbf.readVarint();
}
export function writeProtoOAInterval(obj, pbf) {
    if (obj.startSecond) pbf.writeVarintField(3, obj.startSecond);
    if (obj.endSecond) pbf.writeVarintField(4, obj.endSecond);
}

export function readProtoOATrader(pbf, end) {
    return pbf.readFields(readProtoOATraderField, {ctidTraderAccountId: 0, balance: 0, balanceVersion: 0, managerBonus: 0, ibBonus: 0, nonWithdrawableBonus: 0, accessRights: 0, depositAssetId: 0, swapFree: false, leverageInCents: 0, totalMarginCalculationType: 0, maxLeverage: 0, frenchRisk: false, traderLogin: 0, accountType: 0, brokerName: "", registrationTimestamp: 0, isLimitedRisk: false, limitedRiskMarginCalculationStrategy: 0, moneyDigits: 0, fairStopOut: false, stopOutStrategy: 0}, end);
}
function readProtoOATraderField(tag, obj, pbf) {
    if (tag === 1) obj.ctidTraderAccountId = pbf.readVarint(true);
    else if (tag === 2) obj.balance = pbf.readVarint(true);
    else if (tag === 3) obj.balanceVersion = pbf.readVarint(true);
    else if (tag === 4) obj.managerBonus = pbf.readVarint(true);
    else if (tag === 5) obj.ibBonus = pbf.readVarint(true);
    else if (tag === 6) obj.nonWithdrawableBonus = pbf.readVarint(true);
    else if (tag === 7) obj.accessRights = pbf.readVarint();
    else if (tag === 8) obj.depositAssetId = pbf.readVarint(true);
    else if (tag === 9) obj.swapFree = pbf.readBoolean();
    else if (tag === 10) obj.leverageInCents = pbf.readVarint();
    else if (tag === 11) obj.totalMarginCalculationType = pbf.readVarint();
    else if (tag === 12) obj.maxLeverage = pbf.readVarint();
    else if (tag === 13) obj.frenchRisk = pbf.readBoolean();
    else if (tag === 14) obj.traderLogin = pbf.readVarint(true);
    else if (tag === 15) obj.accountType = pbf.readVarint();
    else if (tag === 16) obj.brokerName = pbf.readString();
    else if (tag === 17) obj.registrationTimestamp = pbf.readVarint(true);
    else if (tag === 18) obj.isLimitedRisk = pbf.readBoolean();
    else if (tag === 19) obj.limitedRiskMarginCalculationStrategy = pbf.readVarint();
    else if (tag === 20) obj.moneyDigits = pbf.readVarint();
    else if (tag === 21) obj.fairStopOut = pbf.readBoolean();
    else if (tag === 22) obj.stopOutStrategy = pbf.readVarint();
}
export function writeProtoOATrader(obj, pbf) {
    if (obj.ctidTraderAccountId) pbf.writeVarintField(1, obj.ctidTraderAccountId);
    if (obj.balance) pbf.writeVarintField(2, obj.balance);
    if (obj.balanceVersion) pbf.writeVarintField(3, obj.balanceVersion);
    if (obj.managerBonus) pbf.writeVarintField(4, obj.managerBonus);
    if (obj.ibBonus) pbf.writeVarintField(5, obj.ibBonus);
    if (obj.nonWithdrawableBonus) pbf.writeVarintField(6, obj.nonWithdrawableBonus);
    if (obj.accessRights) pbf.writeVarintField(7, obj.accessRights);
    if (obj.depositAssetId) pbf.writeVarintField(8, obj.depositAssetId);
    if (obj.swapFree) pbf.writeBooleanField(9, obj.swapFree);
    if (obj.leverageInCents) pbf.writeVarintField(10, obj.leverageInCents);
    if (obj.totalMarginCalculationType) pbf.writeVarintField(11, obj.totalMarginCalculationType);
    if (obj.maxLeverage) pbf.writeVarintField(12, obj.maxLeverage);
    if (obj.frenchRisk) pbf.writeBooleanField(13, obj.frenchRisk);
    if (obj.traderLogin) pbf.writeVarintField(14, obj.traderLogin);
    if (obj.accountType) pbf.writeVarintField(15, obj.accountType);
    if (obj.brokerName) pbf.writeStringField(16, obj.brokerName);
    if (obj.registrationTimestamp) pbf.writeVarintField(17, obj.registrationTimestamp);
    if (obj.isLimitedRisk) pbf.writeBooleanField(18, obj.isLimitedRisk);
    if (obj.limitedRiskMarginCalculationStrategy) pbf.writeVarintField(19, obj.limitedRiskMarginCalculationStrategy);
    if (obj.moneyDigits) pbf.writeVarintField(20, obj.moneyDigits);
    if (obj.fairStopOut) pbf.writeBooleanField(21, obj.fairStopOut);
    if (obj.stopOutStrategy) pbf.writeVarintField(22, obj.stopOutStrategy);
}

export function readProtoOAPosition(pbf, end) {
    return pbf.readFields(readProtoOAPositionField, {positionId: 0, tradeData: undefined, positionStatus: 0, swap: 0, price: 0, stopLoss: 0, takeProfit: 0, utcLastUpdateTimestamp: 0, commission: 0, marginRate: 0, mirroringCommission: 0, guaranteedStopLoss: false, usedMargin: 0, stopLossTriggerMethod: 1, moneyDigits: 0, trailingStopLoss: false}, end);
}
function readProtoOAPositionField(tag, obj, pbf) {
    if (tag === 1) obj.positionId = pbf.readVarint(true);
    else if (tag === 2) obj.tradeData = readProtoOATradeData(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 3) obj.positionStatus = pbf.readVarint();
    else if (tag === 4) obj.swap = pbf.readVarint(true);
    else if (tag === 5) obj.price = pbf.readDouble();
    else if (tag === 6) obj.stopLoss = pbf.readDouble();
    else if (tag === 7) obj.takeProfit = pbf.readDouble();
    else if (tag === 8) obj.utcLastUpdateTimestamp = pbf.readVarint(true);
    else if (tag === 9) obj.commission = pbf.readVarint(true);
    else if (tag === 10) obj.marginRate = pbf.readDouble();
    else if (tag === 11) obj.mirroringCommission = pbf.readVarint(true);
    else if (tag === 12) obj.guaranteedStopLoss = pbf.readBoolean();
    else if (tag === 13) obj.usedMargin = pbf.readVarint();
    else if (tag === 14) obj.stopLossTriggerMethod = pbf.readVarint();
    else if (tag === 15) obj.moneyDigits = pbf.readVarint();
    else if (tag === 16) obj.trailingStopLoss = pbf.readBoolean();
}
export function writeProtoOAPosition(obj, pbf) {
    if (obj.positionId) pbf.writeVarintField(1, obj.positionId);
    if (obj.tradeData) pbf.writeMessage(2, writeProtoOATradeData, obj.tradeData);
    if (obj.positionStatus) pbf.writeVarintField(3, obj.positionStatus);
    if (obj.swap) pbf.writeVarintField(4, obj.swap);
    if (obj.price) pbf.writeDoubleField(5, obj.price);
    if (obj.stopLoss) pbf.writeDoubleField(6, obj.stopLoss);
    if (obj.takeProfit) pbf.writeDoubleField(7, obj.takeProfit);
    if (obj.utcLastUpdateTimestamp) pbf.writeVarintField(8, obj.utcLastUpdateTimestamp);
    if (obj.commission) pbf.writeVarintField(9, obj.commission);
    if (obj.marginRate) pbf.writeDoubleField(10, obj.marginRate);
    if (obj.mirroringCommission) pbf.writeVarintField(11, obj.mirroringCommission);
    if (obj.guaranteedStopLoss) pbf.writeBooleanField(12, obj.guaranteedStopLoss);
    if (obj.usedMargin) pbf.writeVarintField(13, obj.usedMargin);
    if (obj.stopLossTriggerMethod != null && obj.stopLossTriggerMethod !== 1) pbf.writeVarintField(14, obj.stopLossTriggerMethod);
    if (obj.moneyDigits) pbf.writeVarintField(15, obj.moneyDigits);
    if (obj.trailingStopLoss) pbf.writeBooleanField(16, obj.trailingStopLoss);
}

export function readProtoOATradeData(pbf, end) {
    return pbf.readFields(readProtoOATradeDataField, {symbolId: 0, volume: 0, tradeSide: 0, openTimestamp: 0, label: "", guaranteedStopLoss: false, comment: "", measurementUnits: "", closeTimestamp: 0}, end);
}
function readProtoOATradeDataField(tag, obj, pbf) {
    if (tag === 1) obj.symbolId = pbf.readVarint(true);
    else if (tag === 2) obj.volume = pbf.readVarint(true);
    else if (tag === 3) obj.tradeSide = pbf.readVarint();
    else if (tag === 4) obj.openTimestamp = pbf.readVarint(true);
    else if (tag === 5) obj.label = pbf.readString();
    else if (tag === 6) obj.guaranteedStopLoss = pbf.readBoolean();
    else if (tag === 7) obj.comment = pbf.readString();
    else if (tag === 8) obj.measurementUnits = pbf.readString();
    else if (tag === 9) obj.closeTimestamp = pbf.readVarint();
}
export function writeProtoOATradeData(obj, pbf) {
    if (obj.symbolId) pbf.writeVarintField(1, obj.symbolId);
    if (obj.volume) pbf.writeVarintField(2, obj.volume);
    if (obj.tradeSide) pbf.writeVarintField(3, obj.tradeSide);
    if (obj.openTimestamp) pbf.writeVarintField(4, obj.openTimestamp);
    if (obj.label) pbf.writeStringField(5, obj.label);
    if (obj.guaranteedStopLoss) pbf.writeBooleanField(6, obj.guaranteedStopLoss);
    if (obj.comment) pbf.writeStringField(7, obj.comment);
    if (obj.measurementUnits) pbf.writeStringField(8, obj.measurementUnits);
    if (obj.closeTimestamp) pbf.writeVarintField(9, obj.closeTimestamp);
}

export function readProtoOAOrder(pbf, end) {
    return pbf.readFields(readProtoOAOrderField, {orderId: 0, tradeData: undefined, orderType: 0, orderStatus: 0, expirationTimestamp: 0, executionPrice: 0, executedVolume: 0, utcLastUpdateTimestamp: 0, baseSlippagePrice: 0, slippageInPoints: 0, closingOrder: false, limitPrice: 0, stopPrice: 0, stopLoss: 0, takeProfit: 0, clientOrderId: "", timeInForce: 3, positionId: 0, relativeStopLoss: 0, relativeTakeProfit: 0, isStopOut: false, trailingStopLoss: false, stopTriggerMethod: 1}, end);
}
function readProtoOAOrderField(tag, obj, pbf) {
    if (tag === 1) obj.orderId = pbf.readVarint(true);
    else if (tag === 2) obj.tradeData = readProtoOATradeData(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 3) obj.orderType = pbf.readVarint();
    else if (tag === 4) obj.orderStatus = pbf.readVarint();
    else if (tag === 6) obj.expirationTimestamp = pbf.readVarint(true);
    else if (tag === 7) obj.executionPrice = pbf.readDouble();
    else if (tag === 8) obj.executedVolume = pbf.readVarint(true);
    else if (tag === 9) obj.utcLastUpdateTimestamp = pbf.readVarint(true);
    else if (tag === 10) obj.baseSlippagePrice = pbf.readDouble();
    else if (tag === 11) obj.slippageInPoints = pbf.readVarint(true);
    else if (tag === 12) obj.closingOrder = pbf.readBoolean();
    else if (tag === 13) obj.limitPrice = pbf.readDouble();
    else if (tag === 14) obj.stopPrice = pbf.readDouble();
    else if (tag === 15) obj.stopLoss = pbf.readDouble();
    else if (tag === 16) obj.takeProfit = pbf.readDouble();
    else if (tag === 17) obj.clientOrderId = pbf.readString();
    else if (tag === 18) obj.timeInForce = pbf.readVarint();
    else if (tag === 19) obj.positionId = pbf.readVarint(true);
    else if (tag === 20) obj.relativeStopLoss = pbf.readVarint(true);
    else if (tag === 21) obj.relativeTakeProfit = pbf.readVarint(true);
    else if (tag === 22) obj.isStopOut = pbf.readBoolean();
    else if (tag === 23) obj.trailingStopLoss = pbf.readBoolean();
    else if (tag === 24) obj.stopTriggerMethod = pbf.readVarint();
}
export function writeProtoOAOrder(obj, pbf) {
    if (obj.orderId) pbf.writeVarintField(1, obj.orderId);
    if (obj.tradeData) pbf.writeMessage(2, writeProtoOATradeData, obj.tradeData);
    if (obj.orderType) pbf.writeVarintField(3, obj.orderType);
    if (obj.orderStatus) pbf.writeVarintField(4, obj.orderStatus);
    if (obj.expirationTimestamp) pbf.writeVarintField(6, obj.expirationTimestamp);
    if (obj.executionPrice) pbf.writeDoubleField(7, obj.executionPrice);
    if (obj.executedVolume) pbf.writeVarintField(8, obj.executedVolume);
    if (obj.utcLastUpdateTimestamp) pbf.writeVarintField(9, obj.utcLastUpdateTimestamp);
    if (obj.baseSlippagePrice) pbf.writeDoubleField(10, obj.baseSlippagePrice);
    if (obj.slippageInPoints) pbf.writeVarintField(11, obj.slippageInPoints);
    if (obj.closingOrder) pbf.writeBooleanField(12, obj.closingOrder);
    if (obj.limitPrice) pbf.writeDoubleField(13, obj.limitPrice);
    if (obj.stopPrice) pbf.writeDoubleField(14, obj.stopPrice);
    if (obj.stopLoss) pbf.writeDoubleField(15, obj.stopLoss);
    if (obj.takeProfit) pbf.writeDoubleField(16, obj.takeProfit);
    if (obj.clientOrderId) pbf.writeStringField(17, obj.clientOrderId);
    if (obj.timeInForce != null && obj.timeInForce !== 3) pbf.writeVarintField(18, obj.timeInForce);
    if (obj.positionId) pbf.writeVarintField(19, obj.positionId);
    if (obj.relativeStopLoss) pbf.writeVarintField(20, obj.relativeStopLoss);
    if (obj.relativeTakeProfit) pbf.writeVarintField(21, obj.relativeTakeProfit);
    if (obj.isStopOut) pbf.writeBooleanField(22, obj.isStopOut);
    if (obj.trailingStopLoss) pbf.writeBooleanField(23, obj.trailingStopLoss);
    if (obj.stopTriggerMethod != null && obj.stopTriggerMethod !== 1) pbf.writeVarintField(24, obj.stopTriggerMethod);
}

export function readProtoOABonusDepositWithdraw(pbf, end) {
    return pbf.readFields(readProtoOABonusDepositWithdrawField, {operationType: 0, bonusHistoryId: 0, managerBonus: 0, managerDelta: 0, ibBonus: 0, ibDelta: 0, changeBonusTimestamp: 0, externalNote: "", introducingBrokerId: 0, moneyDigits: 0}, end);
}
function readProtoOABonusDepositWithdrawField(tag, obj, pbf) {
    if (tag === 1) obj.operationType = pbf.readVarint();
    else if (tag === 2) obj.bonusHistoryId = pbf.readVarint(true);
    else if (tag === 3) obj.managerBonus = pbf.readVarint(true);
    else if (tag === 4) obj.managerDelta = pbf.readVarint(true);
    else if (tag === 5) obj.ibBonus = pbf.readVarint(true);
    else if (tag === 6) obj.ibDelta = pbf.readVarint(true);
    else if (tag === 7) obj.changeBonusTimestamp = pbf.readVarint(true);
    else if (tag === 8) obj.externalNote = pbf.readString();
    else if (tag === 9) obj.introducingBrokerId = pbf.readVarint(true);
    else if (tag === 10) obj.moneyDigits = pbf.readVarint();
}
export function writeProtoOABonusDepositWithdraw(obj, pbf) {
    if (obj.operationType) pbf.writeVarintField(1, obj.operationType);
    if (obj.bonusHistoryId) pbf.writeVarintField(2, obj.bonusHistoryId);
    if (obj.managerBonus) pbf.writeVarintField(3, obj.managerBonus);
    if (obj.managerDelta) pbf.writeVarintField(4, obj.managerDelta);
    if (obj.ibBonus) pbf.writeVarintField(5, obj.ibBonus);
    if (obj.ibDelta) pbf.writeVarintField(6, obj.ibDelta);
    if (obj.changeBonusTimestamp) pbf.writeVarintField(7, obj.changeBonusTimestamp);
    if (obj.externalNote) pbf.writeStringField(8, obj.externalNote);
    if (obj.introducingBrokerId) pbf.writeVarintField(9, obj.introducingBrokerId);
    if (obj.moneyDigits) pbf.writeVarintField(10, obj.moneyDigits);
}

export function readProtoOADepositWithdraw(pbf, end) {
    return pbf.readFields(readProtoOADepositWithdrawField, {operationType: 0, balanceHistoryId: 0, balance: 0, delta: 0, changeBalanceTimestamp: 0, externalNote: "", balanceVersion: 0, equity: 0, moneyDigits: 0}, end);
}
function readProtoOADepositWithdrawField(tag, obj, pbf) {
    if (tag === 1) obj.operationType = pbf.readVarint();
    else if (tag === 2) obj.balanceHistoryId = pbf.readVarint(true);
    else if (tag === 3) obj.balance = pbf.readVarint(true);
    else if (tag === 4) obj.delta = pbf.readVarint(true);
    else if (tag === 5) obj.changeBalanceTimestamp = pbf.readVarint(true);
    else if (tag === 6) obj.externalNote = pbf.readString();
    else if (tag === 7) obj.balanceVersion = pbf.readVarint(true);
    else if (tag === 8) obj.equity = pbf.readVarint(true);
    else if (tag === 9) obj.moneyDigits = pbf.readVarint();
}
export function writeProtoOADepositWithdraw(obj, pbf) {
    if (obj.operationType) pbf.writeVarintField(1, obj.operationType);
    if (obj.balanceHistoryId) pbf.writeVarintField(2, obj.balanceHistoryId);
    if (obj.balance) pbf.writeVarintField(3, obj.balance);
    if (obj.delta) pbf.writeVarintField(4, obj.delta);
    if (obj.changeBalanceTimestamp) pbf.writeVarintField(5, obj.changeBalanceTimestamp);
    if (obj.externalNote) pbf.writeStringField(6, obj.externalNote);
    if (obj.balanceVersion) pbf.writeVarintField(7, obj.balanceVersion);
    if (obj.equity) pbf.writeVarintField(8, obj.equity);
    if (obj.moneyDigits) pbf.writeVarintField(9, obj.moneyDigits);
}

export function readProtoOADeal(pbf, end) {
    return pbf.readFields(readProtoOADealField, {dealId: 0, orderId: 0, positionId: 0, volume: 0, filledVolume: 0, symbolId: 0, createTimestamp: 0, executionTimestamp: 0, utcLastUpdateTimestamp: 0, executionPrice: 0, tradeSide: 0, dealStatus: 0, marginRate: 0, commission: 0, baseToUsdConversionRate: 0, closePositionDetail: undefined, moneyDigits: 0}, end);
}
function readProtoOADealField(tag, obj, pbf) {
    if (tag === 1) obj.dealId = pbf.readVarint(true);
    else if (tag === 2) obj.orderId = pbf.readVarint(true);
    else if (tag === 3) obj.positionId = pbf.readVarint(true);
    else if (tag === 4) obj.volume = pbf.readVarint(true);
    else if (tag === 5) obj.filledVolume = pbf.readVarint(true);
    else if (tag === 6) obj.symbolId = pbf.readVarint(true);
    else if (tag === 7) obj.createTimestamp = pbf.readVarint(true);
    else if (tag === 8) obj.executionTimestamp = pbf.readVarint(true);
    else if (tag === 9) obj.utcLastUpdateTimestamp = pbf.readVarint(true);
    else if (tag === 10) obj.executionPrice = pbf.readDouble();
    else if (tag === 11) obj.tradeSide = pbf.readVarint();
    else if (tag === 12) obj.dealStatus = pbf.readVarint();
    else if (tag === 13) obj.marginRate = pbf.readDouble();
    else if (tag === 14) obj.commission = pbf.readVarint(true);
    else if (tag === 15) obj.baseToUsdConversionRate = pbf.readDouble();
    else if (tag === 16) obj.closePositionDetail = readProtoOAClosePositionDetail(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 17) obj.moneyDigits = pbf.readVarint();
}
export function writeProtoOADeal(obj, pbf) {
    if (obj.dealId) pbf.writeVarintField(1, obj.dealId);
    if (obj.orderId) pbf.writeVarintField(2, obj.orderId);
    if (obj.positionId) pbf.writeVarintField(3, obj.positionId);
    if (obj.volume) pbf.writeVarintField(4, obj.volume);
    if (obj.filledVolume) pbf.writeVarintField(5, obj.filledVolume);
    if (obj.symbolId) pbf.writeVarintField(6, obj.symbolId);
    if (obj.createTimestamp) pbf.writeVarintField(7, obj.createTimestamp);
    if (obj.executionTimestamp) pbf.writeVarintField(8, obj.executionTimestamp);
    if (obj.utcLastUpdateTimestamp) pbf.writeVarintField(9, obj.utcLastUpdateTimestamp);
    if (obj.executionPrice) pbf.writeDoubleField(10, obj.executionPrice);
    if (obj.tradeSide) pbf.writeVarintField(11, obj.tradeSide);
    if (obj.dealStatus) pbf.writeVarintField(12, obj.dealStatus);
    if (obj.marginRate) pbf.writeDoubleField(13, obj.marginRate);
    if (obj.commission) pbf.writeVarintField(14, obj.commission);
    if (obj.baseToUsdConversionRate) pbf.writeDoubleField(15, obj.baseToUsdConversionRate);
    if (obj.closePositionDetail) pbf.writeMessage(16, writeProtoOAClosePositionDetail, obj.closePositionDetail);
    if (obj.moneyDigits) pbf.writeVarintField(17, obj.moneyDigits);
}

export function readProtoOADealOffset(pbf, end) {
    return pbf.readFields(readProtoOADealOffsetField, {dealId: 0, volume: 0, executionTimestamp: 0, executionPrice: 0}, end);
}
function readProtoOADealOffsetField(tag, obj, pbf) {
    if (tag === 1) obj.dealId = pbf.readVarint(true);
    else if (tag === 2) obj.volume = pbf.readVarint(true);
    else if (tag === 3) obj.executionTimestamp = pbf.readVarint(true);
    else if (tag === 4) obj.executionPrice = pbf.readDouble();
}
export function writeProtoOADealOffset(obj, pbf) {
    if (obj.dealId) pbf.writeVarintField(1, obj.dealId);
    if (obj.volume) pbf.writeVarintField(2, obj.volume);
    if (obj.executionTimestamp) pbf.writeVarintField(3, obj.executionTimestamp);
    if (obj.executionPrice) pbf.writeDoubleField(4, obj.executionPrice);
}

export function readProtoOAClosePositionDetail(pbf, end) {
    return pbf.readFields(readProtoOAClosePositionDetailField, {entryPrice: 0, grossProfit: 0, swap: 0, commission: 0, balance: 0, quoteToDepositConversionRate: 0, closedVolume: 0, balanceVersion: 0, moneyDigits: 0, pnlConversionFee: 0}, end);
}
function readProtoOAClosePositionDetailField(tag, obj, pbf) {
    if (tag === 1) obj.entryPrice = pbf.readDouble();
    else if (tag === 2) obj.grossProfit = pbf.readVarint(true);
    else if (tag === 3) obj.swap = pbf.readVarint(true);
    else if (tag === 4) obj.commission = pbf.readVarint(true);
    else if (tag === 5) obj.balance = pbf.readVarint(true);
    else if (tag === 6) obj.quoteToDepositConversionRate = pbf.readDouble();
    else if (tag === 7) obj.closedVolume = pbf.readVarint(true);
    else if (tag === 8) obj.balanceVersion = pbf.readVarint(true);
    else if (tag === 9) obj.moneyDigits = pbf.readVarint();
    else if (tag === 10) obj.pnlConversionFee = pbf.readVarint(true);
}
export function writeProtoOAClosePositionDetail(obj, pbf) {
    if (obj.entryPrice) pbf.writeDoubleField(1, obj.entryPrice);
    if (obj.grossProfit) pbf.writeVarintField(2, obj.grossProfit);
    if (obj.swap) pbf.writeVarintField(3, obj.swap);
    if (obj.commission) pbf.writeVarintField(4, obj.commission);
    if (obj.balance) pbf.writeVarintField(5, obj.balance);
    if (obj.quoteToDepositConversionRate) pbf.writeDoubleField(6, obj.quoteToDepositConversionRate);
    if (obj.closedVolume) pbf.writeVarintField(7, obj.closedVolume);
    if (obj.balanceVersion) pbf.writeVarintField(8, obj.balanceVersion);
    if (obj.moneyDigits) pbf.writeVarintField(9, obj.moneyDigits);
    if (obj.pnlConversionFee) pbf.writeVarintField(10, obj.pnlConversionFee);
}

export function readProtoOATrendbar(pbf, end) {
    return pbf.readFields(readProtoOATrendbarField, {volume: 0, period: 1, low: 0, deltaOpen: 0, deltaClose: 0, deltaHigh: 0, utcTimestampInMinutes: 0}, end);
}
function readProtoOATrendbarField(tag, obj, pbf) {
    if (tag === 3) obj.volume = pbf.readVarint(true);
    else if (tag === 4) obj.period = pbf.readVarint();
    else if (tag === 5) obj.low = pbf.readVarint(true);
    else if (tag === 6) obj.deltaOpen = pbf.readVarint();
    else if (tag === 7) obj.deltaClose = pbf.readVarint();
    else if (tag === 8) obj.deltaHigh = pbf.readVarint();
    else if (tag === 9) obj.utcTimestampInMinutes = pbf.readVarint();
}
export function writeProtoOATrendbar(obj, pbf) {
    if (obj.volume) pbf.writeVarintField(3, obj.volume);
    if (obj.period != null && obj.period !== 1) pbf.writeVarintField(4, obj.period);
    if (obj.low) pbf.writeVarintField(5, obj.low);
    if (obj.deltaOpen) pbf.writeVarintField(6, obj.deltaOpen);
    if (obj.deltaClose) pbf.writeVarintField(7, obj.deltaClose);
    if (obj.deltaHigh) pbf.writeVarintField(8, obj.deltaHigh);
    if (obj.utcTimestampInMinutes) pbf.writeVarintField(9, obj.utcTimestampInMinutes);
}

export function readProtoOAExpectedMargin(pbf, end) {
    return pbf.readFields(readProtoOAExpectedMarginField, {volume: 0, buyMargin: 0, sellMargin: 0}, end);
}
function readProtoOAExpectedMarginField(tag, obj, pbf) {
    if (tag === 1) obj.volume = pbf.readVarint(true);
    else if (tag === 2) obj.buyMargin = pbf.readVarint(true);
    else if (tag === 3) obj.sellMargin = pbf.readVarint(true);
}
export function writeProtoOAExpectedMargin(obj, pbf) {
    if (obj.volume) pbf.writeVarintField(1, obj.volume);
    if (obj.buyMargin) pbf.writeVarintField(2, obj.buyMargin);
    if (obj.sellMargin) pbf.writeVarintField(3, obj.sellMargin);
}

export function readProtoOATickData(pbf, end) {
    return pbf.readFields(readProtoOATickDataField, {timestamp: 0, tick: 0}, end);
}
function readProtoOATickDataField(tag, obj, pbf) {
    if (tag === 1) obj.timestamp = pbf.readVarint(true);
    else if (tag === 2) obj.tick = pbf.readVarint(true);
}
export function writeProtoOATickData(obj, pbf) {
    if (obj.timestamp) pbf.writeVarintField(1, obj.timestamp);
    if (obj.tick) pbf.writeVarintField(2, obj.tick);
}

export function readProtoOACtidProfile(pbf, end) {
    return pbf.readFields(readProtoOACtidProfileField, {userId: 0}, end);
}
function readProtoOACtidProfileField(tag, obj, pbf) {
    if (tag === 1) obj.userId = pbf.readVarint(true);
}
export function writeProtoOACtidProfile(obj, pbf) {
    if (obj.userId) pbf.writeVarintField(1, obj.userId);
}

export function readProtoOACtidTraderAccount(pbf, end) {
    return pbf.readFields(readProtoOACtidTraderAccountField, {ctidTraderAccountId: 0, isLive: false, traderLogin: 0, lastClosingDealTimestamp: 0, lastBalanceUpdateTimestamp: 0, brokerTitleShort: ""}, end);
}
function readProtoOACtidTraderAccountField(tag, obj, pbf) {
    if (tag === 1) obj.ctidTraderAccountId = pbf.readVarint();
    else if (tag === 2) obj.isLive = pbf.readBoolean();
    else if (tag === 3) obj.traderLogin = pbf.readVarint(true);
    else if (tag === 4) obj.lastClosingDealTimestamp = pbf.readVarint(true);
    else if (tag === 5) obj.lastBalanceUpdateTimestamp = pbf.readVarint(true);
    else if (tag === 6) obj.brokerTitleShort = pbf.readString();
}
export function writeProtoOACtidTraderAccount(obj, pbf) {
    if (obj.ctidTraderAccountId) pbf.writeVarintField(1, obj.ctidTraderAccountId);
    if (obj.isLive) pbf.writeBooleanField(2, obj.isLive);
    if (obj.traderLogin) pbf.writeVarintField(3, obj.traderLogin);
    if (obj.lastClosingDealTimestamp) pbf.writeVarintField(4, obj.lastClosingDealTimestamp);
    if (obj.lastBalanceUpdateTimestamp) pbf.writeVarintField(5, obj.lastBalanceUpdateTimestamp);
    if (obj.brokerTitleShort) pbf.writeStringField(6, obj.brokerTitleShort);
}

export function readProtoOAAssetClass(pbf, end) {
    return pbf.readFields(readProtoOAAssetClassField, {id: 0, name: "", sortingNumber: 0}, end);
}
function readProtoOAAssetClassField(tag, obj, pbf) {
    if (tag === 1) obj.id = pbf.readVarint(true);
    else if (tag === 2) obj.name = pbf.readString();
    else if (tag === 3) obj.sortingNumber = pbf.readDouble();
}
export function writeProtoOAAssetClass(obj, pbf) {
    if (obj.id) pbf.writeVarintField(1, obj.id);
    if (obj.name) pbf.writeStringField(2, obj.name);
    if (obj.sortingNumber) pbf.writeDoubleField(3, obj.sortingNumber);
}

export function readProtoOADepthQuote(pbf, end) {
    return pbf.readFields(readProtoOADepthQuoteField, {id: 0, size: 0, bid: 0, ask: 0}, end);
}
function readProtoOADepthQuoteField(tag, obj, pbf) {
    if (tag === 1) obj.id = pbf.readVarint();
    else if (tag === 3) obj.size = pbf.readVarint();
    else if (tag === 4) obj.bid = pbf.readVarint();
    else if (tag === 5) obj.ask = pbf.readVarint();
}
export function writeProtoOADepthQuote(obj, pbf) {
    if (obj.id) pbf.writeVarintField(1, obj.id);
    if (obj.size) pbf.writeVarintField(3, obj.size);
    if (obj.bid) pbf.writeVarintField(4, obj.bid);
    if (obj.ask) pbf.writeVarintField(5, obj.ask);
}

export function readProtoOAMarginCall(pbf, end) {
    return pbf.readFields(readProtoOAMarginCallField, {marginCallType: 0, marginLevelThreshold: 0, utcLastUpdateTimestamp: 0}, end);
}
function readProtoOAMarginCallField(tag, obj, pbf) {
    if (tag === 1) obj.marginCallType = pbf.readVarint();
    else if (tag === 2) obj.marginLevelThreshold = pbf.readDouble();
    else if (tag === 3) obj.utcLastUpdateTimestamp = pbf.readVarint(true);
}
export function writeProtoOAMarginCall(obj, pbf) {
    if (obj.marginCallType) pbf.writeVarintField(1, obj.marginCallType);
    if (obj.marginLevelThreshold) pbf.writeDoubleField(2, obj.marginLevelThreshold);
    if (obj.utcLastUpdateTimestamp) pbf.writeVarintField(3, obj.utcLastUpdateTimestamp);
}

export function readProtoOAHoliday(pbf, end) {
    return pbf.readFields(readProtoOAHolidayField, {holidayId: 0, name: "", description: "", scheduleTimeZone: "", holidayDate: 0, isRecurring: false, startSecond: 0, endSecond: 0}, end);
}
function readProtoOAHolidayField(tag, obj, pbf) {
    if (tag === 1) obj.holidayId = pbf.readVarint(true);
    else if (tag === 2) obj.name = pbf.readString();
    else if (tag === 3) obj.description = pbf.readString();
    else if (tag === 4) obj.scheduleTimeZone = pbf.readString();
    else if (tag === 5) obj.holidayDate = pbf.readVarint(true);
    else if (tag === 6) obj.isRecurring = pbf.readBoolean();
    else if (tag === 7) obj.startSecond = pbf.readVarint(true);
    else if (tag === 8) obj.endSecond = pbf.readVarint(true);
}
export function writeProtoOAHoliday(obj, pbf) {
    if (obj.holidayId) pbf.writeVarintField(1, obj.holidayId);
    if (obj.name) pbf.writeStringField(2, obj.name);
    if (obj.description) pbf.writeStringField(3, obj.description);
    if (obj.scheduleTimeZone) pbf.writeStringField(4, obj.scheduleTimeZone);
    if (obj.holidayDate) pbf.writeVarintField(5, obj.holidayDate);
    if (obj.isRecurring) pbf.writeBooleanField(6, obj.isRecurring);
    if (obj.startSecond) pbf.writeVarintField(7, obj.startSecond);
    if (obj.endSecond) pbf.writeVarintField(8, obj.endSecond);
}

export function readProtoOADynamicLeverage(pbf, end) {
    return pbf.readFields(readProtoOADynamicLeverageField, {leverageId: 0, tiers: []}, end);
}
function readProtoOADynamicLeverageField(tag, obj, pbf) {
    if (tag === 1) obj.leverageId = pbf.readVarint(true);
    else if (tag === 2) obj.tiers.push(readProtoOADynamicLeverageTier(pbf, pbf.readVarint() + pbf.pos));
}
export function writeProtoOADynamicLeverage(obj, pbf) {
    if (obj.leverageId) pbf.writeVarintField(1, obj.leverageId);
    if (obj.tiers) for (const item of obj.tiers) pbf.writeMessage(2, writeProtoOADynamicLeverageTier, item);
}

export function readProtoOADynamicLeverageTier(pbf, end) {
    return pbf.readFields(readProtoOADynamicLeverageTierField, {volume: 0, leverage: 0}, end);
}
function readProtoOADynamicLeverageTierField(tag, obj, pbf) {
    if (tag === 1) obj.volume = pbf.readVarint(true);
    else if (tag === 2) obj.leverage = pbf.readVarint(true);
}
export function writeProtoOADynamicLeverageTier(obj, pbf) {
    if (obj.volume) pbf.writeVarintField(1, obj.volume);
    if (obj.leverage) pbf.writeVarintField(2, obj.leverage);
}

export function readProtoOAPositionUnrealizedPnL(pbf, end) {
    return pbf.readFields(readProtoOAPositionUnrealizedPnLField, {positionId: 0, grossUnrealizedPnL: 0, netUnrealizedPnL: 0}, end);
}
function readProtoOAPositionUnrealizedPnLField(tag, obj, pbf) {
    if (tag === 1) obj.positionId = pbf.readVarint(true);
    else if (tag === 2) obj.grossUnrealizedPnL = pbf.readVarint(true);
    else if (tag === 3) obj.netUnrealizedPnL = pbf.readVarint(true);
}
export function writeProtoOAPositionUnrealizedPnL(obj, pbf) {
    if (obj.positionId) pbf.writeVarintField(1, obj.positionId);
    if (obj.grossUnrealizedPnL) pbf.writeVarintField(2, obj.grossUnrealizedPnL);
    if (obj.netUnrealizedPnL) pbf.writeVarintField(3, obj.netUnrealizedPnL);
}
