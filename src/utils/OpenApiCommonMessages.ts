// code generated by pbf v4.0.1
import PBF from "pbf";

export enum ProtoPayloadType {
    PROTO_MESSAGE = 5,
    ERROR_RES = 50,
    HEARTBEAT_EVENT = 51
}

export enum ProtoErrorCode {
    UNKNOWN_ERROR = 1,
    UNSUPPORTED_MESSAGE = 2,
    INVALID_REQUEST = 3,
    TIMEOUT_ERROR = 5,
    ENTITY_NOT_FOUND = 6,
    CANT_ROUTE_REQUEST = 7,
    FRAME_TOO_LONG = 8,
    MARKET_CLOSED = 9,
    CONCURRENT_MODIFICATION = 10,
    BLOCKED_PAYLOAD_TYPE = 11
}

/** Base message that is used for all messages that are sent to/from Open API proxy of cTrader platform. */
export type ProtoMessage = {
    payloadType: number;
    payload?: Uint8Array;
    clientMsgId?: string;
}

export function readProtoMessage(pbf: PBF, end?: number) {
    return pbf.readFields(readProtoMessageField, {payloadType: 0, payload: undefined, clientMsgId: ""}, end);
}
function readProtoMessageField(tag: number, obj: ProtoMessage, pbf: PBF) {
    if (tag === 1) obj.payloadType = pbf.readVarint();
    else if (tag === 2) obj.payload = pbf.readBytes();
    else if (tag === 3) obj.clientMsgId = pbf.readString();
}
export function writeProtoMessage(obj: ProtoMessage, pbf: PBF) {
    if (obj.payloadType) pbf.writeVarintField(1, obj.payloadType);
    if (obj.payload != null) pbf.writeBytesField(2, obj.payload);
    if (obj.clientMsgId) pbf.writeStringField(3, obj.clientMsgId);
}

/** Error response that is sent from Open API proxy when error occurs. */
export type ProtoErrorRes = {
    payloadType?: ProtoPayloadType;
    
    errorCode: string; // FIXME ProtoErrorCode?
    description?: string;
    maintenanceEndTimestamp?: number;
}

export function readProtoErrorRes(pbf: PBF, end?: number) {
    return pbf.readFields(readProtoErrorResField, {payloadType: 50, errorCode: "", description: "", maintenanceEndTimestamp: 0}, end);
}
function readProtoErrorResField(tag: number, obj: ProtoErrorRes, pbf: PBF) {
    if (tag === 1) obj.payloadType = pbf.readVarint();
    else if (tag === 2) obj.errorCode = pbf.readString();
    else if (tag === 3) obj.description = pbf.readString();
    else if (tag === 4) obj.maintenanceEndTimestamp = pbf.readVarint();
}
export function writeProtoErrorRes(obj: ProtoErrorRes, pbf: PBF) {
    if (obj.payloadType != null && obj.payloadType !== 50) pbf.writeVarintField(1, obj.payloadType);
    if (obj.errorCode) pbf.writeStringField(2, obj.errorCode);
    if (obj.description) pbf.writeStringField(3, obj.description);
    if (obj.maintenanceEndTimestamp) pbf.writeVarintField(4, obj.maintenanceEndTimestamp);
}

export type ProtoHeartbeatEvent = {
    payloadType?: ProtoPayloadType;
}

export function readProtoHeartbeatEvent(pbf: PBF, end?: number) {
    return pbf.readFields(readProtoHeartbeatEventField, {payloadType: 51}, end);
}
function readProtoHeartbeatEventField(tag: number, obj: ProtoHeartbeatEvent, pbf: PBF) {
    if (tag === 1) obj.payloadType = pbf.readVarint();
}
export function writeProtoHeartbeatEvent(obj: ProtoHeartbeatEvent, pbf: PBF) {
    if (obj.payloadType != null && obj.payloadType !== 51) pbf.writeVarintField(1, obj.payloadType);
}
